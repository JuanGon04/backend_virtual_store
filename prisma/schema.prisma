generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String  @id @default(uuid())
  name                 String
  email                String  @unique
  password             String
  rol                  String  @default("client")
  token_reset_password String?

  //payments Payment[]
  orders Orders[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id                String    @id @default(uuid())
  ordersId          Int
  status            String    @default("pending")
  payment_method    Json?
  invoice_id        String    @unique
  payment_id_paypal String
  payer             Json?
  date_created      DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Orders    Orders?  @relation(fields: [ordersId], references: [id])
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  price       Float
  stock       Int
  inputs      Int     @default(0)
  outputs     Int     @default(0)
  brand       String  @default("generica")
  description String?
  isActive    Boolean @default(true)
  //image String

  ordersItems OrdersItems[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Orders {
  id          Int          @id @default(autoincrement())
  user_id     String
  totalAmount Float
  totalItems  Int
  status      OrdersStatus @default(PENDING)
  paid        Boolean      @default(false)
  paidAt      DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  payment Payment[]
  items   OrdersItems[]
  User    User?         @relation(fields: [user_id], references: [id])
}

model OrdersItems {
  id        Int   @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float

  order   Orders  @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Auditoria {
  id                          Int    @id @default(autoincrement())
  payment_id                  String @unique
  payment_id_paypal           String
  response_created_preference Json?
  resquested_webhook          Json?
  response_get_payment        Json?
  external_reference          String @unique
  info_return_payment         Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrdersStatus {
  PENDING
  COMPLETED
  CANCELED
}
